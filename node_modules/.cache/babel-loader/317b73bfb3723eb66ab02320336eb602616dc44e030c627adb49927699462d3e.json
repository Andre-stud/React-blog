{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const fetchArticles = createAsyncThunk(\"articles/fetchArticles\", async (value, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    const responseArticles = await fetch(`https://api.realworld.io/api/articles?limit=5&offset=${value}`);\n    // ('https://api.realworld.io/api/articles?limit=5&offset=5');\n    if (!responseArticles.ok) {\n      throw new Error(\"responseId error\");\n    }\n    const articles = await responseArticles.json();\n    return articles;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// https://api.realworld.io/api/articles/If-we-quantify-the-alarm-we-can-get-to-the-FTP-pixel-through-the-online-SSL-interface!-120863\n\nconst articlesSlice = createSlice({\n  name: \"articl\",\n  initialState: {\n    articles: [],\n    article: [],\n    defaultPath: \"/\",\n    status: null,\n    error: null\n  },\n  reducers: {\n    async selectArticle(state, actions) {\n      const fetchArticle = await fetch(`https://api.realworld.io/api/articles/${actions.payload}`);\n      const acticleData = await fetchArticle.json();\n      console.log(acticleData);\n      state.article = acticleData;\n    }\n  },\n  extraReducers: {\n    [fetchArticles.pending]: state => {\n      state.status = \"loading\";\n      state.error = null;\n    },\n    [fetchArticles.fulfilled]: (state, actions) => {\n      state.status = \"resolved\";\n      state.articles = actions.payload;\n    },\n    [fetchArticles.rejected]: (state, actions) => {\n      state.status = \"rejected\";\n      state.error = actions.payload;\n    }\n  }\n});\nexport const {\n  selectArticle\n} = articlesSlice.actions;\nexport default articlesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchArticles","value","_ref","rejectWithValue","responseArticles","fetch","ok","Error","articles","json","error","message","articlesSlice","name","initialState","article","defaultPath","status","reducers","selectArticle","state","actions","fetchArticle","payload","acticleData","console","log","extraReducers","pending","fulfilled","rejected","reducer"],"sources":["/Users/andre/Desktop/blog/src/components/store/articles-slice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const fetchArticles = createAsyncThunk(\n  \"articles/fetchArticles\",\n  async (value, { rejectWithValue }) => {\n    try {\n      const responseArticles = await fetch(\n        `https://api.realworld.io/api/articles?limit=5&offset=${value}`\n      );\n      // ('https://api.realworld.io/api/articles?limit=5&offset=5');\n      if (!responseArticles.ok) {\n        throw new Error(\"responseId error\");\n      }\n\n      const articles = await responseArticles.json();\n\n      return articles;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// https://api.realworld.io/api/articles/If-we-quantify-the-alarm-we-can-get-to-the-FTP-pixel-through-the-online-SSL-interface!-120863\n\nconst articlesSlice = createSlice({\n  name: \"articl\",\n  initialState: {\n    articles: [],\n    article: [],\n    defaultPath: \"/\",\n    status: null,\n    error: null,\n  },\n  reducers: {\n    async selectArticle(state, actions) {\n      const fetchArticle = await fetch(`https://api.realworld.io/api/articles/${actions.payload}`);\n      const acticleData = await fetchArticle.json();\n      console.log(acticleData);\n      state.article = acticleData;\n    },\n  },\n  extraReducers: {\n    [fetchArticles.pending]: (state) => {\n      state.status = \"loading\";\n      state.error = null;\n    },\n    [fetchArticles.fulfilled]: (state, actions) => {\n      state.status = \"resolved\";\n      state.articles = actions.payload;\n    },\n    [fetchArticles.rejected]: (state, actions) => {\n      state.status = \"rejected\";\n      state.error = actions.payload;\n    },\n  },\n});\n\nexport const { selectArticle } = articlesSlice.actions;\nexport default articlesSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,wBAAwB,EACxB,OAAOE,KAAK,EAAAC,IAAA,KAA0B;EAAA,IAAxB;IAAEC;EAAgB,CAAC,GAAAD,IAAA;EAC/B,IAAI;IACF,MAAME,gBAAgB,GAAG,MAAMC,KAAK,CACjC,wDAAuDJ,KAAM,EAAC,CAChE;IACD;IACA,IAAI,CAACG,gBAAgB,CAACE,EAAE,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IACrC;IAEA,MAAMC,QAAQ,GAAG,MAAMJ,gBAAgB,CAACK,IAAI,EAAE;IAE9C,OAAOD,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOP,eAAe,CAACO,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CAAC,CACF;;AAED;;AAEA,MAAMC,aAAa,GAAGd,WAAW,CAAC;EAChCe,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZN,QAAQ,EAAE,EAAE;IACZO,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,GAAG;IAChBC,MAAM,EAAE,IAAI;IACZP,KAAK,EAAE;EACT,CAAC;EACDQ,QAAQ,EAAE;IACR,MAAMC,aAAaA,CAACC,KAAK,EAAEC,OAAO,EAAE;MAClC,MAAMC,YAAY,GAAG,MAAMjB,KAAK,CAAE,yCAAwCgB,OAAO,CAACE,OAAQ,EAAC,CAAC;MAC5F,MAAMC,WAAW,GAAG,MAAMF,YAAY,CAACb,IAAI,EAAE;MAC7CgB,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;MACxBJ,KAAK,CAACL,OAAO,GAAGS,WAAW;IAC7B;EACF,CAAC;EACDG,aAAa,EAAE;IACb,CAAC3B,aAAa,CAAC4B,OAAO,GAAIR,KAAK,IAAK;MAClCA,KAAK,CAACH,MAAM,GAAG,SAAS;MACxBG,KAAK,CAACV,KAAK,GAAG,IAAI;IACpB,CAAC;IACD,CAACV,aAAa,CAAC6B,SAAS,GAAG,CAACT,KAAK,EAAEC,OAAO,KAAK;MAC7CD,KAAK,CAACH,MAAM,GAAG,UAAU;MACzBG,KAAK,CAACZ,QAAQ,GAAGa,OAAO,CAACE,OAAO;IAClC,CAAC;IACD,CAACvB,aAAa,CAAC8B,QAAQ,GAAG,CAACV,KAAK,EAAEC,OAAO,KAAK;MAC5CD,KAAK,CAACH,MAAM,GAAG,UAAU;MACzBG,KAAK,CAACV,KAAK,GAAGW,OAAO,CAACE,OAAO;IAC/B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEJ;AAAc,CAAC,GAAGP,aAAa,CAACS,OAAO;AACtD,eAAeT,aAAa,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}